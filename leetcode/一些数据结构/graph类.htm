<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        class Graph {
            constructor(isDirected = false) {
                this.isDirected = isDirected
                this.vertices = []
                // 存储所有顶点
                this.adjList = new Map()
                // 用来存储邻接表
            }

            // 为下面的函数服务
            addvVertex(v) {
                if (!this.vertices.includes(v)) {
                    this.vertices.push(v)
                    this.adjList.set(v, [])
                }

            }
            addEdge(v, w) {
                if (!this.vertices.includes(v)) {
                    this.addvVertex(v)
                }
                if (!this.vertices.includes(w)) {
                    this.addvVertex(w)
                }
                this.adjList.get(v).push(w)
                if (this.isDirected) {
                    this.adjList.get(w).push(v)
                }
            }
            getvertices() {
                return this.vertices
            }
            getAdjList() {
                return this.adjList
            }

            toString() {
                let s = ''
                for (let i = 0; i < this.vertices.length; i++) {
                    s = s + `${this.vertices[i]} ->`
                    const neighbors = this.adjList.get(this.vertices[i])
                    for (let i = 0; i < neighbors.length; i++) {
                        s = s + `${neighbors[i]} `
                    }
                    s = s + "\n"
                }
                return s
            }
        }
        const Colors = {
            WHITE: 0,
            GREY: 1,
            BLACK: 2
        };
        const initializeColor = function (vertices) {
            const color = {}
            for (let i = 0; i < vertices.length; i++) {
                color[vertices[i]] = Colors.WHITE
            }
            return color
        }

        const breadthFirstSearch = (graph, startvertex, callback) => {
            const vertices = graph.getvertices()
            const adjList = graph.getAdjList()
            const color = initializeColor(vertices)
            const queue = []
            queue.push(startvertex)
            while (queue.length !== 0) {
                const u = queue.shift()
                const neighbors = adjList.get(u)
                color[u] = color.GREY
                for (let i = 0; i < neighbors.length; i++) {
                    const w = neighbors[i]
                    if (color[w] == Colors.WHITE) {
                        color[w] = Colors.GREY
                        queue.push(w)
                    }

                }
                color[u] = Colors.BLACK
                if (callback) { callback(u) }
            }
        }




        const graph = new Graph();
        const myVertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']; // {12} 
        for (let i = 0; i < myVertices.length; i++) { // {13} 
            graph.addvVertex(myVertices[i]);
        }
        graph.addEdge('A', 'B'); // {14}
        graph.addEdge('A', 'C');
        graph.addEdge('A', 'D');
        graph.addEdge('C', 'D');
        graph.addEdge('C', 'G');
        graph.addEdge('D', 'G');
        graph.addEdge('D', 'H');
        graph.addEdge('B', 'E');
        graph.addEdge('B', 'F');
        graph.addEdge('E', 'I');
        console.log(graph.toString())

        breadthFirstSearch(graph, graph.getvertices()[0], (value) => console.log('visited vertex: ' + value))
    </script>
</head>

<body>

</body>

</html>